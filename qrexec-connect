#!/usr/bin/python

import sys
import os
import signal
import functools
import logging
import asyncio
import socket
import subprocess
import systemd.journal
import systemd.daemon
import argparse
import shlex


class QrexecConnect:
    """A systemd-native qrexec-client-vm service

    Attributes
    ----------
    exit_signals: tuple[str]
        A list of signal names that should stop the application

    NO_LISTEN_FDS: int
        Return code when not started as a systemd service

    UNSUPPORTED_ADDRESS_FAMILY: int
        Return code when socket fd is not one of IPv4, IPv6, or Unix

    FILEDESCRIPTORNAME_ERROR: int
        Return code when FileDescriptorName value is not exactly two arguments
    """

    exit_signals = ("SIGINT", "SIGTERM")

    NO_LISTEN_FDS = 125
    UNSUPPORTED_ADDRESS_FAMILY = 126
    FILEDESCRIPTORNAME_ERROR = 127

    def __init__(self):
        """Parses arguments, sets up logging, and tests for listening fds provided by systemd"""

        arg_parser = argparse.ArgumentParser(
            description="%(prog)s: systemd-native qrexec-client-vm",
        )
        arg_parser.add_argument("--buffer-size", type=int, default=65536)
        arg_parser.add_argument("-d", "--debug", action="store_true")

        self.logger = logging.getLogger(arg_parser.prog)
        self.logger.addHandler(
            systemd.journal.JournalHandler(SYSLOG_IDENTIFIER=arg_parser.prog)
        )

        args = arg_parser.parse_args()
        self.buffer_size = args.buffer_size
        self.debug = args.debug

        if self.debug:
            self.logger.setLevel(logging.DEBUG)
        else:
            self.logger.setLevel(logging.INFO)

        self.fds_with_names = systemd.daemon.listen_fds_with_names()

        if not self.fds_with_names:
            print("No listen FDs found", file=sys.stderr)
            exit(self.NO_LISTEN_FDS)

    async def run(self):
        """Run connection servers"""

        loop = asyncio.get_running_loop()

        for signame in self.exit_signals:
            qrexec_connect_exit = functools.partial(self.exit, signame, loop)

            loop.add_signal_handler(
                getattr(signal, signame),
                qrexec_connect_exit,
            )

        server_arg_tuples = [
            self.get_server_args(fd, fd_name)
            for fd, fd_name in self.fds_with_names.items()
        ]

        ready_barrier = asyncio.Barrier(len(server_arg_tuples) + 1)

        async with asyncio.TaskGroup() as server_task_group:
            server_task_group.create_task(self.ready(ready_barrier))
            for server_args in server_arg_tuples:
                server_task_group.create_task(
                    self.serve_connection(*server_args, ready_barrier)
                )

    async def ready(self, ready_barrier):
        """Notify systemd when all connection servers are ready

        Parameters
        ----------
        ready_barrier: asyncio.Barrier
            Barrier to count number of ready connection servers
        """
        await ready_barrier.wait()
        systemd.daemon.notify("READY=1")

    def exit(self, signame, loop):
        """Gracefully exits in response to signals

        Parameters
        ----------
        signame: str
            Signal name, like "SIGINT"

        loop: asyncio.EventLoop
            Running event loop
        """
        systemd.daemon.notify("STOPPING=1")
        loop.stop
        exit(0)

    def get_server_args(self, fd, fd_name):
        """Start asyncio connection server from systemd socket and qrexec-client-vm arguments

        Parameters
        ----------
        fd: int
            Listening systemd socket file descriptor

        fd_name: str
            FileDescriptorName value for systemd socket

        Returns
        -------
        tuple[coro, coro, socket.socket, str]
            Tuple of arguments for self.serve_connection
        """
        target_qube, rpc_service = self.parse_fd_name(fd_name)
        sock = socket.socket(fileno=fd)
        sock_address = self.sock_address(sock)

        # functools.partial can't generate async functions, yet
        async def handle_connection(reader, writer):
            await self.qrexec_handle_connection(
                target_qube, rpc_service, reader, writer
            )

        if sock.family in (socket.AF_INET, socket.AF_INET6):
            start_server = asyncio.start_server
        elif sock.family == socket.AF_UNIX:
            start_server = asyncio.start_unix_server
        else:
            print(f"Unsupported address family: {sock.family}", file=sys.stderr)
            exit(self.UNSUPPORTED_ADDRESS_FAMILY)

        return (
            start_server,
            handle_connection,
            sock,
            f"{sock_address} ({shlex.join((target_qube, rpc_service))})",
        )

    async def serve_connection(
        self, start_server, handle_connection, sock, description, ready_barrier
    ):
        """Start connection server and serve connections forever

        Parameters
        ----------
        start_server: coro
            The start_server coroutine that matches the socket's address family

        handle_connection: coro
            Connection handler callback for the start_server coroutine

        sock: socket.socket
            Socket for the file descriptor that systemd is listening on

        description: str
            Socket address and qrexec-client-vm arguments for this connection server

        ready_barrier: asyncio.Barrier
            Barrier to count number of ready connection servers
        """
        server = await start_server(handle_connection, sock=sock, start_serving=False)
        self.logger.info(description)
        await ready_barrier.wait()
        async with server:
            await server.serve_forever()

    def sock_address(self, sock):
        """Format socket address for logging

        Parameters
        ----------
        sock: socket.socket
            A socket

        Returns
        -------
        str
            A string representing the socket address
        """
        address = sockname = sock.getsockname()

        if sock.family == socket.AF_UNIX:
            if type(sockname) == bytes:
                after_null_address = sockname[1:]
                string_address = after_null_address.decode(sys.getdefaultencoding())
                address = f"@{string_address}"
        elif sock.family == socket.AF_INET:
            if type(sockname) == tuple and len(sockname) == 2:
                address = f"{sockname[0]}:{sockname[1]}"
        elif sock.family == socket.AF_INET6:
            if type(sockname) == tuple and len(sockname) == 4:
                address = f"[{sockname[0]}]:{sockname[1]}"

        return address

    def parse_fd_name(self, fd_name):
        """Parse systemd FileDescriptorName value

        Parameters
        ----------
        fd_name: str
            FileDescriptorName value for systemd socket

        Returns
        -------
        array[str]
            An array of strings containing arguments to qrexec-client-vm
        """
        argv = shlex.split(fd_name)

        if len(argv) != 2:
            was_or_were = "was" if len(argv) == 1 else "were"
            print(
                f"FileDescriptorName takes 2 arguments but {len(argv)} {was_or_were} given: '{fd_name}'",
                file=sys.stderr,
            )
            exit(self.FILEDESCRIPTORNAME_ERROR)

        return argv

    async def qrexec_handle_connection(self, target_qube, rpc_service, reader, writer):
        """Handle client qube connections to a listening socket

        Parameters
        ----------
        target_qube: str
            Service qube

        rpc_service: str
            Qube RPC service descriptor (rpc_name[+rpc_arg])

        reader: asyncio.StreamReader
            Input stream generated by asyncio.start_[unix_]server

        writer: asyncio.StreamWriter
            Output stream generated by asyncio.start_[unix_]server
        """
        fd_name = shlex.join((target_qube, rpc_service))

        self.logger.debug(f"Starting ({fd_name})...")

        qrexec_client = await asyncio.create_subprocess_exec(
            "/usr/bin/qrexec-client-vm",
            f"--buffer-size={self.buffer_size}",
            "--no-filter-escape-chars-stdout",
            "--filter-escape-chars-stderr",
            "--",
            target_qube,
            rpc_service,
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        self.logger.debug(f"Started ({fd_name})")

        async with asyncio.TaskGroup() as qrexec_client_group:
            qrexec_client_group.create_task(qrexec_client.wait())
            qrexec_client_group.create_task(
                self.qrexec_pipe(reader, qrexec_client.stdin)
            )
            qrexec_client_group.create_task(
                self.qrexec_pipe(qrexec_client.stdout, writer)
            )

        self.logger.debug(f"Exited ({fd_name})")

        if qrexec_client.returncode != 0:
            stderr = await qrexec_client.stderr.read()
            error_message = stderr.decode("ascii")
            self.logger.error(f"{fd_name}: {error_message}")


    async def qrexec_pipe(self, source, sink):
        """Pipe data from source stream to sink stream until source reaches EOF

        Parameters
        ----------
        source: asyncio.StreamReader
            Input stream

        sink: asyncio.StreamWriter
            Output stream
        """
        while not source.at_eof():
            data = await source.read(self.buffer_size)
            if data:
                sink.write(data)
                await sink.drain()
            else:
                source.feed_eof()

        sink.close()
        await sink.wait_closed()


if __name__ == "__main__":
    asyncio.run(QrexecConnect().run())
